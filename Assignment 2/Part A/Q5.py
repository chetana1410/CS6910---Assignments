# -*- coding: utf-8 -*-
"""GuidedBackpropTF2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tAC7xx2IJxjK700bdaLatTVeDA02GJn

# Guided Backpropagation with TF2

Full implementation of GradCAM and Guided GradCAM with TF2
- Kaggle Notebook: https://www.kaggle.com/nguyenhoa/dog-cat-classifier-gradcam-with-tensorflow-2-0
- Source code and visualization with Ipywidgets: https://github.com/nguyenhoa93/GradCAM_and_GuidedGradCAM_tf2
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow.keras.applications.resnet import ResNet50, preprocess_input, decode_predictions
import tensorflow.keras.backend as K
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
print("Tensorflow version: ", tf.__version__)
from PIL import Image
import matplotlib.pyplot as plt
import keras
import numpy as np
from keras.models import model_from_json
# %matplotlib inline

from google.colab import drive
drive.mount("/content/gdrive")

H, W = 224, 224

def build_model():
  json_file = open('model.json', 'r')
  loaded_model_json = json_file.read()
  json_file.close()
  model = model_from_json(loaded_model_json)
  return model

def load_image(path, preprocess=True):
    """Load and preprocess image."""
    x = image.load_img(path, target_size=(H, W))
    if preprocess:
        x = image.img_to_array(x)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
    return x

def deprocess_image(x):
    
    # normalize tensor: center on 0., ensure std is 0.25
    x = x.copy()
    x -= x.mean()
    x /= (x.std() + K.epsilon())
    x *= 0.25

    # clip to [0, 1]
    x += 0.5
    x = np.clip(x, 0, 1)

    # convert to RGB array
    x *= 255
    if K.image_data_format() == 'channels_first':
        x = x.transpose((1, 2, 0))
    x = np.clip(x, 0, 255).astype('uint8')
    return x

# Origin image
plt.imshow(load_image('/content/gdrive/MyDrive/inaturalist_12K/val/Aves/049650eac0f12d7a16c785a0f1e06e0f.jpg', preprocess=False))
plt.axis("off");

# process example input
preprocessed_input = load_image('/content/gdrive/MyDrive/inaturalist_12K/val/Aves/049650eac0f12d7a16c785a0f1e06e0f.jpg')

@tf.custom_gradient
def guidedRelu(x):
  def grad(dy):
    return tf.cast(dy>0,"float32") * tf.cast(x>0, "float32") * dy
  return tf.nn.relu(x), grad

#model = tf.keras.applications.resnet50.ResNet50(weights='imagenet', include_top=True)
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
model = model_from_json(loaded_model_json)
gb_model = Model(
    inputs = [model.inputs],
    outputs = [model.get_layer("conv2d_4").output]
)
output_shape = model.get_layer("conv2d_4").output.shape[1:]
layer_dict = [layer for layer in gb_model.layers[1:] if hasattr(layer,'activation')]
for layer in layer_dict:
  if layer.activation == tf.keras.activations.relu:
    layer.activation = guidedRelu

fig , ax = plt.subplots(10,1,figsize=(50,50))

#fig.suptitle('Visualizing 10 neurons in Conv_5 layer with guided backpropagation',fontsize=20)
for i in range(10):
  random_neuron_idx=[0]+[np.random.randint(0,d_max-1) for d_max in output_shape]

  mask = np.zeros((1,*output_shape))
  mask[random_neuron_idx[0],random_neuron_idx[1],random_neuron_idx[2],random_neuron_idx[3]]=1
  with tf.GradientTape() as tape:
    inputs = tf.cast(preprocessed_input, tf.float32)
    tape.watch(inputs)
    outputs = gb_model(inputs)*mask

  grads = tape.gradient(outputs,inputs)[0]
  ax[i].imshow(np.flip(deprocess_image(np.array(grads)),-1))
  ax[i].set_xticks([])
  ax[i].set_yticks([])
  ax[i].set_title(f'Neuron_index :{random_neuron_idx}',fontsize=14,fontweight='bold', pad=10)

